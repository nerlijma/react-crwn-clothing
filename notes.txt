> yarn add node-sass
> yarn start

Mode Sass version 6.0.1 is incompatible with ^4.0.0 || ^5.0.0.
1. yarn remove node-sass
2. Add "sass-loader": "^11.1.1" as web_Dependency in package.json
3. Delete node_modules and yarn.lock
4. yarn

import SectionsData from './directory.data.json'

En el constructor:
this.state = {
	sections: SectionsData
}

https://fonts.google.com/specimen/Open+Sans+Condensed?query=condensed
vas a index.html y agregas el

<link href="https://fonts.googleapis.com/css2?family=Open+Sans+Condensed:wght@300&display=swap" rel="stylesheet">

** React Router

yarn add react-router-dom

Si hay conflictos, se puede agregar

"devDependencies": {
},

"resolutions": {
    "babel-jest": "24.7.1" (o similar)
}

props.match.params.topicId (leer parametros de la url)

Avoid property drilling... (pasar las prop a multiples hijos que no los usan)

Para tener acceso al history, y hacer history.push.
import {withRouter} from 'react-router-dom'
export default withRouter(MenuItem);

Push te navega a una url. onClick={() => history.push(`${match.url}${linkUrl}`)}

Como mostrar una pagina condicional? ej Si esta logueado o no. on Route render, te permite tener una
funcion en vez de un componente.

<Route exact path='/sign-in' render={() => currentUser ? (<Redirect to='/' />) : (<SignInAndSignUp />)} />

Destructuring and spread
collections.map( ({id, ...otherProps}) => (
	<CollectionPreview key={id} {...otherProps} />
))

Usar una imagen como un elemento de react
import { ReactComponent as Logo } from '../../assets/crown.svg'
<Logo />

Cuando haces una funcion con => arreglas el this. Para que sea del contexto de la clase cuando haces 
this.setState

ALT + Click: Agregas un segundo cursor en VS code
Ctrl+Shift+L: Pone cursor en cada palabra para editar al mismo tiempo
SHIFT + ALT: Seleccion en bloque

*** Firebase
Crear el proyecto en https://console.firebase.google.com/
Ir a agregar a proyecto web (Proyect Overview / Web)
copiar el objeto con la configuracion de firebase
> yarn add firebase 

Para poner un atributo true, no es necesario hacer ={true} con <CustomButton isGoogleSignin es suficiente
<CustomButton isGoogleSignin onClick={signInWithGoogle}>Sign in with Google</CustomButton>

const CustomButton = ({ children, inverted, isGoogleSignin, ...otherProps }) => (
    <button className={`${inverted ? 'inverted' : isGoogleSignin ? 'google-sign-in' : ''} custom-button`}
        {...otherProps}>
        {children}
    </button>
)

Cuando ponemos &. en sas equivale a .custom-button.google-sign-in 

class="custom-button google-sign-in"

.custom-button {
    &.google-sign-in {
        background-color: #4285f4;
    }
}

Cuando usamso @mixin en SAS es para reutilizra codigo

@mixin shrinkLabel {
  top: -14px;
  font-size: 12px;
  color: $main-color;
}

&.shrink {
	@include shrinkLabel();
}

FireStore
Production Mode (privada nadie puede escribir ni leer solo por reglas) vs Test Mode (cualquiera puede leer y escribir)
QueryReference - Objecto de la colleccion que represento. (auque no existe)
QuerySnapshot  -  Haciendo get() de la reference se obtienen los datos. Crud se hace con snapshot.

En v9
Hay que buscar una referencia doc o collection
const userRef = doc(db, `users/${userAuth.uid}`);

y luego guardarla con setDoc o setCollection
await setDoc(userRef, data);

Te subscribis a los cambios con onSnapshot

onSnapshot(userRef, doc => {
	this.setState({
	currentUser: {
		id: doc.id,
		...doc.data()
	}
});

* Ejemplo onSnapshopt para subscribirte a cambios real time
componentDidMount() {
	const { updateCollections } = this.props;
	const collectionsRef = getCollections();
	this.collectionSnapshotListener = onSnapshot(collectionsRef, (collSnapshot) => {
		const collectionsMap = convertCollectionSnapshotToMap(collSnapshot);
		updateCollections(collectionsMap);
		this.setState({ loading: false });
	});
}

Para usar await, la funcion debe estar declarada con async

    handleSubmit = async e => {
        e.preventDefault();
        await createUserProfileWithEmailAndPassword(this.state);
        this.setState({ email: '', password: '', displayName: '', confirmPassword: '' });
    }

https://ant.design/components/table/
http://flexboxfroggy.com/

Solo para el caso de google, si te logueas con usuario y password, y luego con google. 
Te pisa la autenticación de usuario y contraseña. No pasa al reves.
Si queres tener google y email y contraseña tenes que estar logueado y linkear con otro proveedor
https://firebase.google.com/docs/auth/web/account-linking

Redux
- Single source of truth
- One way dataflow
- State is red only (inmutability) Se crea siempre un nuevo estato
- Changes using pure functions
- Evita pasar props entre hijos que no se usan
- Hay un reducer para cada modulo

Action -> Reducer (pure function) -> Store updated -> DOM Changes

EN el reducer siempre se retorna un nuevo objeto

switch (action.type)  {
case 'SET_CURRENT_USER':
	return {
		...currentState,
		currentUser: action.payload
	}
default:
	return currentState;
}

Hay middelwares que ejecutan antes de llegar al reducer. Ej Logger

> yarn add redux redux-logger react-redux

reducer/root-reducer.js contiene todos los reducers de los modulos. user-reducer.jsx etc.

Se combinan en uno solo en el root-reduer.js

export default combineReducers({
    user: userReducer
});

** Leer estado Redux
Hay que mapear el state to props en cada componente

const mapStateToProps = state => ({
    currentUser: state.user.currentUser
})

export default connect(mapStateToProps)(Header);

** Dispatch Actions Redux
Para llamar a una action, hay que mepearla a una funcion disponible en props.

para luego llamarla: this.props.setCurrentUser o setCurrentUser() si haces  un destruct de this.props

const mapDispatchToProps = dispatch => ({
  setCurrentUser: user => dispatch(setCurrentUser(user))
})

export default connect(null, mapDispatchToProps)(App);

La forma mas similar a ngIf*:

{(visible) && <CartDropdown />}

Los function components siepre reciben props de parametro. Si haces destruct va siempre con {}
y puede ser atributo, objecto o funcion de Redux. Ej {item, setItem, etc}

Spread array [...array, {new Item}] - Agrega un item al array
Spread obj {...obj, prop}           - AGrega una prop al obj

Hacer destruct anidado
Si paso props, y adentro tiene item puedo hacer 
{item: {name, imageUrl, quantity}} 
El problema de hacer destruct anidado, es que ya no tenes acceso al item. Solo a las props que destructuraste.
Si se necesita acceso al item, hay que dejar item y hacer const {name, imageUrl, quantity} = item; para usarla.

Debugger: hay que buscar el launch.json y cambiar la url para que sea la misma.

*** redux selectors. Mapeas a props una funcion.
const mapStateToProps = ({ cart: { cartItems } }) => ({
    itemCount: cartItems.reduce((acc, cartItem) => acc + cartItem.quantity, 0)
})

El problema que tienen es que se llaman cada vez que cambia el state, aunque no cambie cartItems
Se soluciona con reusable selectors: reselect

Se crea una porcion del state con cart.selectors.js

> yarn add reselect

Para escribir menos codigo y evitar pasar el staet se puede user el 

import { createStructuredSelector } from 'reselect';

const mapStateToProps = createStructuredSelector({
    cartItems: selectCartItems
})

En connect, sin o mapeas mapDispatchToProps, se injecta igual el dispath object

Ej: const CartDropdown = ({ cartItems, history, dispatch }) => (

por lo tanto podes llamar a un action haciendo

import { setToogleVisibility } from '../../redux/cart/cart.actions'
dispatch(setToogleVisibility());

Html Digbats
https://www.w3schools.com/charsets/ref_utf_dingbats.asp

Para filtrar un item por Id de un array, lo mejor es usar filter. Te devuelve un nuevo array sin el item.
array.filtar(item=>item.id !== itemToRemove.id)


*** Persistance

> yarn add redux-persist

Hay que modificar store.js y agregar persistStore

import { persistStore } from 'redux-persist';

const store = createStore(rootReducer, applyMiddleware(...middlewares));
const persistor = persistStore(store);

Se exporta el store y tambien el persistor
export default {store, persistor};   

En root-reducer.js
import storage from 'redux-persist/lib/storage'
const persistConfig = {
    key: root,
    storage,
    whitelist: ['cart']
}

const rootReducer = combineReducers({
    user: userReducer,
    cart: cartReducer
});

export default persistReducer(persistConfig, rootReducer);

y en index.js hay que wrappear app

import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from './redux/store';

<PersistGate persistor={persistor}>
  <App />
</PersistGate>

Plugin: Paste Json to code

* Nested Routes

Las rutas pueden ir en cualquier componente, tambien con su switch en caso que solo renderizar una
 <Switch>
	<Route exact path={`${match.path}`} component={CollectionsOverview} />
	<Route path={`${match.path}/:collectionId`} component={CollectionPage} /> 
 </Switch>	

Cuando se pone :collectionId, va de parametro en la ruta hacia el componente.

match.params.CollectionId acceso al parametro. Si esta dentro de un route, podes injectar match

* Payments with stripe
> yarn add react-stripe-checkout

* Host In Heruku
Download heruku cli
https://devcenter.heroku.com/articles/heroku-cli#download-and-install

Instructions_
https://github.com/mars/create-react-app-buildpack

> heroku login
> heroku create crwn-live-nerlijma --buildpack mars/create-react-app
> git push heroku master
> heroku open
https://crwn-live-nerlijma.herokuapp.com/ deployed to Heroku

No funciona la autencacion con google firebase pq el dominio no esta agregado.

Quitar los logs de redux logger en prod.

en store.js, solo agrego el logger si es development

if (process.env.NODE_ENV === 'development') {
    middlewares.push(logger);
}

** Styled Templates.

> yarn add styled-components
Componentes con estilos asi no pasa el problema de pisarse css entre componentes

header.styles.jsx

import styled, { css } from 'styled-components';
import { Link } from 'react-router-dom';

- Estilos de div
export const HeaderContainer = styled.div`
    height: 70px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    margin-bottom: 25px;
`

- Estilos heredando de Link
export const LogoContainer = styled(Link)`
    height: 100%;
    width: 70px;
    padding: 25px;
`;

- Reutilizar estilos
const OptionContainerStyles = css`
    padding: 10px 15px;
    cursor: pointer;
`

export const OptionDiv = styled.div`
    ${OptionContainerStyles}
`
Para reutilizar tambien se puede usar <optionLink as='div'
y asi no necesitas 2 componenetes.

Se puede hacer una funcion para determinar estilos dinamicos

const getButtonStyles = props => {
    if (props.isGoogleSignin) {
        return googleButtonStyles;
    }

    return props.inverted ? invertedButtonStyles : buttonStyles;
};

Y se incluye con string interpolation 

export const CustomButtonContainer = styled.button`
    min-width: 165px;
    width: auto;
    height: 50px;
    letter-spacing: 0.5px;
	
    ${getButtonStyles}
`;

Para que funcione hay que pasar las props al componente

const CustomButton = ({ children, ...props }) => (
    <CustomButtonContainer {...props}>{children}</CustomButtonContainer>
)

En el styled component podes recibir una propiedad como funcion
background-image: ${({ imageUrl }) => `url(${imageUrl})`};

A veces en el componente se pueden dejar claseName para hacer referencia luego en el hover.

&:hover {
	.image {
		opacity: 0.8;
	}

	button {
		opacity: 0.85;
		display: flex;
	}
}

<CollectionImage className='image' imageUrl={imageUrl} /> 
	

** Firestore Query and Snapshots, and rules
Agregar en batch

const batch = writeBatch(db);
const newDocRef = doc(collection(db, collectionKey), item.title); Si no le paso title te genera un id automatico
batch.set(newDocRef, item);
await batch.commit();

Reduce en arrays() para transformar un arry de objectos[] en un objeto {} se usa reduce
Va iterando el array y modificando el mismo objecto que se inicializa con {}

arr.reduce((acc, collection) => {
	acc[collection.id.toLowerCase()] = collection;
	return acc;
}, {})

Ejemplos de reduce()

A) Contar los elementos de un array con reduce:
arr.reduce((acc, item) => { 
    acc[item] = (acc[item] || 0) + 1
    return  acc;
} , {})

B) 2 dim array en -> 1 dim array
const twoDArr = [ [1,2], [3,4], [5,6], [7,8] , [9,10] ];

const oneDArr = twoDArr.reduce((acu, current) => {
    console.log(`acu: ${acu}, current:${current}`);
    return acu.concat(current);
}, []);

React class components
En un componente de clase, para no hacer contructor y setear el state, para hacerlos mas liviano se puede hacer

state = {
	loading: true
};

Y no se necesita el contructor.

*** HOC High Order Component Pattern
Es el decorator pattern. Se obtiene un componente nuevo enriquecido.
Es un functional component que recibe otro como parametro y lo retorna enriquecido. 
O sea que devuelve un componente.

const WithSpinner = WrappedComponent => {
    const Spinner = ({ isLoading, ...otherProps }) => {
        return isLoading ? (
            <SpinnerOverlay>
                <SpinnerContainer />
            </SpinnerOverlay>
        ) : (
            <WrappedComponent {...otherProps} />
        )
    };

    return Spinner;
};

export default WithSpinner;

y se llama como: 

const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);

y en router:

<Route exact
	path={`${match.path}`}
	render={(props) => <CollectionsOverviewWithSpinner isLoading={loading} {...props} />}

Sin router seria:

<CollectionsOverviewWithSpinner isLoading={loading} {...this.props} />
Props son las props que ya tiene el componente. history, location, match si es un componente llamado en una ruta.

IMPORTANTE: Cuando se hace destruct con spread no importa el nombre de la variable
const Spinner = ({ ...pepe }) 
pepe contiene todas las variables pasadas por parametro
Si no es spread si importa el nombre, se espera la variable con el nombre que pasaste.
{isLoading, ...pepe} isLoading importa, pepe no.

*** Observable pattern
Te subscribis a un stream de eventos que ocurren.
Te subscribis (funcion, error function)y luego siempre hay que unsuscribe.
JsRx.

*** redux-thunk
> yarn add redux-thunk
Fire functions in redux async

Para instalarlo en store.js
import thunk from 'redux-thunk';

let middlewares = [thunk];

if (process.env.NODE_ENV === 'development') {
    middlewares.push(logger);
}

1. Crear los types para la accion asyncronica. ej. 

export const ShopActionTypes = {
    'FETCH_COLLECTIONS_START': 'FETCH_COLLECTIONS_START',
    'FETCH_COLLECTIONS_SUCCESS': 'FETCH_COLLECTIONS_SUCCESS',
    'FETCH_COLLECTIONS_FAILURE': 'FETCH_COLLECTIONS_FAILURE'
}

2. Modificar el estado (reducer) para cada accion
   case ShopActionTypes.FETCH_COLLECTIONS_START:
            return {
                ...state,
                isFetching: true
            }

        case ShopActionTypes.FETCH_COLLECTIONS_SUCCESS:
            return {
                ...state,
                isFetching: false,
                collections: action.payload
            }

        case ShopActionTypes.FETCH_COLLECTIONS_FAILURE:
            return {
                ...state,
                isFetching: true,
                errorMessage: action.payload
            }

3. Crear las acciones. La mas importante es la async, que al tener redux-thunk en vez de 
las actions ser funciones que retornan objetos, 
retorna una dispach function (dispach) => {}

Si retorna un objeto, el middleware de thunk lo ignora, si es funcion lo intercepta y lo ejecuta.

export const fetchCollectionsStartAsync = () => {
    return dispatch => {
        dispatch(fetchCollectionsStart());
        const collectionsRef = getCollections();

        collectionsRef
            .get()
            .then(collSnapshot => {
                const collectionsMap = convertCollectionSnapshotToMap(collSnapshot);
                dispatch(fetchCollectionsSuccess(collectionsMap));
            })
            .catch(error => dispatch(fetchCollectionsFailure(error.message)))
    }
};

Si quisiera poner axios, seria

export const fetchStartAsync = () => {
    return dispatch => {
        dispatch(fetchCollectionsStart());
        axios.get(url)
			.then((response) => dispatch(fetchCollectionsSuccess(response.data))
			.catch((response) => dispatch(fetchCollectionsFailure(response.error)))
    }
};


NOTA: Render de componentes.
El componentDidMount se dispara luego que se renderiza el coponente. Para el caso del spinner
como el fech es en componentDidMount la logica sería.
isFetching = false
render Shop
  render Collections (renderiza anulo con el if (collections) return null  
shop.componentDidMount  
  fechCollections --> isFetching = true
Se actualiza el Collections component pq cambio el estado de isFetching
isFetching = false

NOTA: Parece mejor tener un select para cuando la collection es null y no isFetching. 
Si es null, nunca debería renderizar el componente y poner spinner.

render={(props) => <CollectionsOverviewWithSpinner isLoading={!isCollectionsLoaded} {...props} />}

NOTA: operador !! va a dar true si el obj tiene algo. Si es 0, null, undefined, '' da false.

*** Absolute paths
1. crear el archivo en el root del proyecto: jsconfig.json

resolveJsonModule: permite agregar modulos en archivos .json
checkJs: valida errores de javascript (false por defecto)

{
    "compilerOptions": {
        "module": "commonjs",
        "target": "es2016",
        "jsx": "preserve",
        "checkJs": false,
        "baseUrl": "./src",
        "resolveJsonModule": true
    },
    "exclude": [
        "node_modules",
        "**/node_modules/*"
    ]
}

2. Reiniciar VS code
3. Poner un path absoluto 

import DIRECTORY_DATA from 'components/directory/directory.data.json';

4. yarn start y ver si hay errores

** Container Pattern
Se crean container components, que pasan propiedades al componente que contienen. no renderizan nada
Ej. Collection.container.jsx

import {compose} from 'redux';

const mapStateToProps = createStructuredSelector({
    isLoading: (state) => !selectIsCollectionsLoaded(state)
});

const CollectionPageContainer = compose(
    connect(mapStateToProps),
    WithSpinner
)(CollectionPage);

export default CollectionPageContainer;

** Sagas
> yarn add redux-saga

Side effect: API calls async to backend.
Impure Reactions: Si llamo a la funcion con parametros iguales me puede dar resultados diferentes.

Todo lo que sea impuro, debe estar en una Saga.

Generator functions: 
Funciones que podes pausar la ejecución, y la proxima se ejecuta cuando haces next()

function* gen(i) {
	yield i:
	yield i+ 10;
	return 25;
}

let g = gen(5);
g.next();  // value: 5, done:false
g.next(); // value: 15  done:false
g.next(); // value: 25 done:true

Configuracion

store.js

import createSagaMiddleware from 'redux-saga';
import {fetchCollectionsStart} from './shop/shop.sagas'

const sagaMiddleware = createSagaMiddleware();
const middlewares = [sagaMiddleware];

const store = createStore(rootReducer, applyMiddleware(...middlewares));
sagaMiddleware.run(fetchCollectionsStart); // debe ser despuede de createStore

shop.sagas.js

Error: Actions must be plain objects. Instead, the actual type was: ''. You may need to add middleware to your store setup to handle dispatching other values, 
such as 'redux-thunk' to handle dispatching functions

En el shop.component, siempre se hace referncia a las shop.actions (y no shop.sagas)

En la generator function de abajo, cada vez que de hace dispatch de FETCH_COLLECTIONS_START, 
se llama al worker  fetchCollectionsAsync (que es otra generator function)
export function* fetchCollectionsStart() {
    yield takeEvery(
        ShopActionTypes.FETCH_COLLECTIONS_START,
        fetchCollectionsAsync
    )
}

yield call - Llama a una funcion
yield put - Para hacer dispatch e una accion

const collectionsMap = yield call(convertCollectionSnapshotToMap, collectionsSnapshot);
yield put(fetchCollectionsSuccess(collectionsMap));

OJO: put va con el llamado a la funcion, no va con comma. Comma es CALL

takeLatest vs takeEvery - Si llamo muchas veces takeLatest se queda con únicamente el ultimo llamado

* Root Saga. Para no hacer MiddleWare.run para cada saga
root.saga.js

import { all, call } from 'redux-saga/effects';
import { fetchCollectionsStart } from 'redux/shop/shop.sagas';

export default function* rootSaga() {
    // Inicializa todas las sagas en paralelo
    yield all([
        call(fetchCollectionsStart)
    ]);
}
 
Se importa en store.js

import rootSaga from './root-saga';
sagaMiddleware.run(rootSaga);

En funcion de la saga, siempre se recibe:

// Recibe {payload: {obj de payload}, action: ''}
export function* EmailSignIn({ payload: { email, password } }) {

Las generator functions se pueden refactorear para no duplicar codigo. 
Siempre siendo una generator function con yield, put, set, etc.

Las sagas es bueno ponerlas como onAction, ya que estamos escuchando a la funcion.

* implementas isUserAuthenticated saga con Promise.


NOTA:
TypeError: Cannot read properties of null (reading 'redirectPersistenceManager') at signOut (http://localhost:3

Verificar que en la saga se este llamando bien a los metodos. Ej le faltaba parenthesis a:
        yield auth.signOut();


